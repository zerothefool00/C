/*
#include <iostream>
using namespace std;

class unity
{
public:
	int iNum1;	//4
	int iNum2;	//8
	int iNum3;	//12
	int iNum4;	//16
	unity()
	{
		cout << "생성자 호출됨\n";
	}
};

int main()
{
	unity Obj;
	cout << sizeof(Obj) << endl;

	return 0;
}
*/

/*
#include <iostream>
using namespace std;

class Point
{
private:
	int xpos;
	int ypos;
public:
	Point(int x = 0, int y = 0) : xpos(x), ypos(y)
	{
	}
	void ShowPosition() const
	{
		cout << '[' << xpos << "," << ypos<<']' << endl;
	}
	friend ostream& operator<<(ostream&, const Point&);
};

ostream& operator<<(ostream& os, const Point& pos)
{
	os << '[' << pos.xpos << "," << pos.ypos<<']' << endl;
	return os;
}

int main(void)
{
	Point pos1(1, 3);
	cout<<pos1;
	Point pos2(101, 303);
	cout<<pos2;
	return 0;
}
*/
/*
#include <iostream>
namespace mystd
{
using namespace std;
class ostream
{
public:
void operator<< (char * str)
{
printf("1[%s]", str);
}
void operator<< (char str)
{
printf("@%c@", str);
}
void operator<< (int num)
{
printf("3[%d]", num);
}
void operator<<(double e)
{
printf("2[%g]", e);
}
void operator<<(void(*fp) (ostream &ostm))
{
printf("##");
fp(*this);  // call 31
}
};

void endl(ostream &ostm)
{
ostm << '=';  // call 12
ostm << '=';  // call 12
ostm << '\n';  // call 12
fflush(stdout);
}
ostream cout;
}

int main(void)
{
using mystd::cout;
using mystd::endl;

cout << "Simple String";  // call 8
cout << endl; // cout.operator<<(endl); // call 24
cout << 3.14;      // call 20
cout.operator<<(endl);  // call 24
cout << 123;      // call 16
endl(cout);        // call 24

return 0;
}
*/

/*
#include <iostream>
using namespace std;

class First
{
private:
	int num1;
	int num2;
public:
	First(int n1 = 0, int n2 = 0) : num1(n1), num2(n2)
	{

	}
	void ShowData() { cout << num1 << ", " << num2 << endl; }
};

class Second
{
private:
	int num3;
	int num4;
public:
	Second(int n3 = 0, int n4 = 0) : num3(n3), num4(n4)
	{

	}
	void ShowData() { cout << num3 << ", " << num4 << endl; }

	Second& operator=(const Second& ref)
	{
		cout << "Second& operator=()" << endl;
		num3 = ref.num3;
		num4 = ref.num4;
		return  *this;
	}
	/*
	void operator=(const Second& ref)	//3단 변화가 작동안하는 코드
	{
		cout << "Second& operator=()" << endl;
		num3 = ref.num3;
		num4 = ref.num4;
		//return  *this;				//자기 함수를 반환하는 코드
	
	}
	*//*
};

int main(void)
{
	First fsrc(111, 222);
	First fcpy;
	Second ssrc(333, 444);
	Second scpy;
	fcpy = fsrc;
	scpy = ssrc;
	fcpy.ShowData();
	scpy.ShowData();

	First fob1, fob2;
	Second sob1, sob2;
	fob1 = fob2 = fsrc;
	sob1 = sob2 = ssrc;

	fob1.ShowData();
	fob2.ShowData();
	sob1.ShowData();
	sob2.ShowData();
	return 0;
}

//446page의 대입연산자
Person& operator=(const Person& ref)//ref는 자기마음?
{
	delete[]name;	//메모리 해제 연산
	int len = strlen(ref.name)+1;
	name = new char[len];
	strcpy(name, ref.name);
	age = ref.age;;
	return *this;
}
*/

/*
#include <iostream>
using namespace std;

class First
{
private:
	int num1;
	int num2;
public:
	First(int n1 = 0, int n2 = 0) : num1(n1), num2(n2)
	{

	}
	void ShowData() { cout << num1 << ", " << num2 << endl; }

	First& operator=(const First& ref)
	{
		cout << "First& operator=()" << endl;
		num1 = ref.num1;
		num2 = ref.num2;
		return *this;
	}

};

class Second : public First
{
private:
	int num3;
	int num4;
public:
	Second(int n1, int n2, int n3, int n4)
		:First(n1, n2), num3(n3), num4(n4)
	{

	}
	void ShowData()
	{
		First::ShowData();
		cout << num3 << ", " << num4 << endl;
	}
	
	Second& operator=(const Second& ref)
	{
	cout << "Second& operator=()" << endl;
	First::operator=(ref);		//기초 클래스의 대입 연산자 호출을 명령!!!!내가 유도 클래스의 대입연산자를 입력했으면 끝까지 책임져야함
	num3 = ref.num3;
	num4 = ref.num4;
	return *this;
	}
	
};

int main(void)
{
	Second ssrc(111, 222, 333, 444);
	Second scpy(0, 0, 0, 0);
	scpy = ssrc;
	scpy.ShowData();
	return 0;
}
*/
/*
#include <iostream>
using namespace std;

class AAA
{
	private:
		int num;
	public:
		AAA(int n = 0) :num(n)
		{
			cout << "AAA(int n=0)" <<endl;
		}
		AAA(const AAA& ref) : num(ref.num)
		{
			cout << "AAA(const AAA& ref)" << endl;
		}
		AAA& operator=(const AAA& ref)
		{
			num = ref.num;
			cout << "operator=(const AAA& ref)" << endl;
			return *this;
		}
};

class BBB
{
	private:
		AAA mem;
	public:
		BBB(const AAA& ref) : mem(ref)
		{

		}
};

class CCC
{
private:
	AAA mem;
public:
	CCC(const AAA& ref) { mem = ref; }
};

int main(void)
{
	AAA obj1(12);
	cout << "**********************" << endl;
	BBB obj2(obj1);
	cout << "**********************" << endl;
	CCC obj3(obj1);
	return 0;
}
*/

//배열범위를 벗어나는 것 체크하는 방법
#include <iostream>
#include <cstdlib>
using namespace std;

class BoundCheckIntArray
{
	private:
		int * arr;
		int arrlen;
	public:
		BoundCheckIntArray(int len) : arrlen(len)
		{
			arr = new int[len];
		}
		int& operator[] (int idx)
		{
			if (idx<0 || idx>=arrlen)
			{
				cout << "Array index out of bound exception" << endl;
				exit(1);
			}
			return arr[idx];
		}
		~BoundCheckIntArray()
		{
			delete[]arr;
		}
};

int main(void)
{
	BoundCheckIntArray arr(5);
	for (int i = 0; i < 5; i++)
		arr[i] = (i + 1) * 11;
	for (int i = 0; i < 6; i++)
		cout<<arr[i]<<endl;
	return 0;
}
