/*
#include <iostream>
#include<cstring>
using namespace std;

class Person
{
private:
	char * name;
	int age;
public:
	Person(char*myname, int myage)
	{
		int len = strlen(myname) + 1;
		name = new char[len];
		strcpy(name, myname);
		age = myage;
	}
	void ShowPersonInfo() const
	{
		cout << "이름: " << name << endl;
		cout << "나이: " << age << endl;
	}
	~Person()
	{
		delete[]name;
		cout << "called destructor!" << endl;
		cout << "동적할당 제거전" << endl;
	}
	Person(const Person& copy)
		: age(copy.age)
	{                       // <--- '깊은 복사'를 위한 복사 생성자 정의
		name = new char[strlen(copy.name) + 1];
		strcpy(name, copy.name);
	}
};

int main(void)

{
	Person man1("Lee dong woo", 29);
	Person man2 = man1;
	man1.ShowPersonInfo();
	man2.ShowPersonInfo();
	return 0;
}
*/
/*
#include <iostream>

using namespace std;

class unity
{
public:
unity()
{
cout << "디폴트 생성자 호출됨\n";
}
unity(unity& Old)
{
cout << "복사 생성자 호출됨\n";
}
void Print()
{
cout << "unity의 Print 호출됨\n";
}
~unity()
{
cout << "소멸자 호출됨\n";
}
};
void test(unity &Ref)
{
cout << "test 함수 호출됨\n";
return;
}
void test2(unity Ref)
{
cout << "test2 함수 호출됨\n";
return;
}
unity test3()
{
cout << "test3 함수 호출됨\n";
unity Obj3;
cout << "test3 함수 종료됨\n";
return Obj3;
}
int main()
{
#if 1
cout << "main 함수 시작됨\n";
test3().Print();
cout << "main 함수 종료됨\n";
#elif 0
// p227 case 3
cout << "main 함수 시작됨\n";
unity Obj1 = test3();
cout << "main 함수 종료됨\n";
#elif 0
// p227 case 2
unity Obj1;
test2(Obj1);
#elif 0
// p227 case 1
unity Obj1;
unity Obj2 = Obj1;
unity Obj3(Obj2);
#endif

return 0;
}
*/

/*
#include <iostream>
using namespace std;

class SoSimple
{
private:
	int num;
public:
	SoSimple(int n) : num(n)
	{}
	SoSimple(const SoSimple & copy) :num(copy.num)
	{
		cout << "CalledSoSimple(const SoSimple & copy)" << endl;
	}
	SoSimple& AddNum(int n)
	{
		num += n;
		return *this;
	}
	void ShowData()
	{
		cout << "num: " << num << endl;
	}
};

SoSimple SimpleFunObj(SoSimple ob)
{
	cout << "return 이전" << endl;
	return ob;							
}
int main(void)
{
	SoSimple obj(7);
	SimpleFunObj(obj).AddNum(30).ShowData();         //SimpleFunObj 끝나지만 뒤에를 실행하기 위해서 ob를 이 임시 객체에 객체를 복사시킴
	//임시객체(ob).AddNum(30).ShowData();				주석순으로 진행됨
	//임시객체(ob).ShowData();
	obj.ShowData();
	return 0;
}
*/
/*
#include <iostream>
#include<cstring>
using namespace std;

class Girl;		//Girl이라는 이름이 클래스의 이름임을 알림


class Boy
{
private:
	int height;
	friend class Girl;		//Girl 클래스에 대한 friend선언
public:
	Boy(int len) : height(len)
	{}
	void ShowYourFriendInfo(Girl &frn);
};

class Girl
{
private:
	char phNum[20];
public:
	Girl(char * num)
	{
		strcpy(phNum, num);
	}
	void ShowYourFriendInfo(Boy &frn);
	friend class Boy;		//Boy 클래스에 대한 friend 선언
};

void Boy::ShowYourFriendInfo(Girl &frn)
{
	cout << "Her phone number: " << frn.phNum << endl;
}

void Girl::ShowYourFriendInfo(Boy &frn)
{
	cout << "His height: " << frn.height << endl;
}


int main(void)
{
	Boy boy(170);
	Girl girl("010-1234-5678");
	boy.ShowYourFriendInfo(girl);
	girl.ShowYourFriendInfo(boy);
	return 0;
}
*/
/*
#include <iostream>
using namespace std;

int simObjCnt = 0;
int cmxObjCnt = 0;

class SoSimple
{
private:
	int iNum;
public:
	SoSimple()
	{
		simObjCnt++;
		inum = simObjCnt;
		cout << simObjCnt << "번째 SoSimple 객체" << endl;
	}
	~SoSimple
};

class SoComplex
{
private:
	int iNum;
public:
	SoComplex()
	{
		cmxObjCnt++;
		iNum = cmxObjCnt;
		cout << cmxObjCnt << "번째 SoComplex 객체" << endl;
	}
	SoComplex(SoComplex & copy)
	{
		cmxObjCnt++;
		iNum = cmxObjCnt;
		cout << simObjCnt << "번째 SoComplex 객체" << endl;
	}
	~SoComplex.cmx
	{
		delete SoComplex;
	}
};

int main(void)
{
	SoSimple sim1;
	SoSimple sim2;

	SoComplex com1;
	SoComplex com2 = com1;
	SoComplex();		//생성자 호출
	return 0;
}
*/
/*
#include <iostream>
using namespace std;

int simObjCnt = 0;
int cmxObjCnt = 0;

class SoSimple
{
private:
int iNum;
public:
SoSimple()
{
simObjCnt++;
iNum = simObjCnt;
cout << simObjCnt << "번째 SoSimple 객체" << endl;
}
~SoSimple()
{
simObjCnt--;
cout << iNum << "번 SoSimple 객체 소멸" << endl;
}
};

class SoComplex
{
private:
int iNum;
public:
SoComplex()
{
cmxObjCnt++;
iNum = cmxObjCnt;
cout << cmxObjCnt << "번째 SoComplex 객체" << endl;
}
SoComplex(SoComplex & copy)
{
cmxObjCnt++;
iNum = cmxObjCnt;
cout << simObjCnt << "번째 SoComplex 객체" << endl;
}
~SoComplex()
{
cmxObjCnt--;
cout << iNum << "번 SoComplex 객체 소멸" << endl;
}
};

int main(void)
{
SoSimple sim1;
SoSimple sim2;

SoComplex com1;
SoComplex com2 = com1;
SoComplex();

cout << "SoSimple  객체 수 : " << simObjCnt << endl;
cout << "SoComplex 객체 수 : " << cmxObjCnt << endl;

return 0;
}
*/
/*
#include <iostream>
using namespace std;

class SoSimple
{
private:
	static int simObjCnt;
public:
	SoSimple()
	{
		simObjCnt++;
		cout << simObjCnt << "번째 SoSimple 객체" << endl;
	}
	
};
int SoSimple::simObjCnt= 0;

class SoComplex
{
private:
	static int cmxObjCnt;
public:
	SoComplex()
	{
		cmxObjCnt++;
		cout << cmxObjCnt << "번째 SoComplex 객체" << endl;
	}
	SoComplex(SoComplex & copy)
	{
		cmxObjCnt++;
		cout << cmxObjCnt << "번째 SoComplex 객체" << endl;
	}
};
int SoComplex::cmxObjCnt = 0;

int main(void)
{
	SoSimple sim1;
	SoSimple sim2;

	SoComplex cmx1;
	SoComplex cmx2 = cmx1;
	SoComplex();															//임시객체
	return 0;
}
*/
/*
#include <iostream>
using namespace std;

class SoSimple
{
public:
		static int simObjCnt;
public: // 불필요하지만 변수와 함수의 구분을 목적으로 삽입하기도 함
	SoSimple()
	{
		simObjCnt++;

	}
};
int SoSimple::simObjCnt = 0;

int main(void)
{
	cout << SoSimple::simObjCnt << "번째 Sosimple 객체" << endl;
	SoSimple sim1;
	SoSimple sim2;

	cout << SoSimple::simObjCnt << "번째 Sosimple 객체" << endl;
	cout << sim1.simObjCnt << "번째 SoSimple 객체" << endl;
	cout << sim2.simObjCnt<< "번째 SoSimple 객체" << endl;
	return 0;
}
*/

/*
#include <iostream>
using namespace std;

class unity
{
public:
	int iNum2;
	static int iNum;
	static void test()
	{
		//iNum2 = 3; 스태틱 함수는 일반 클래스 변수에 접근 불가
		iNum = 3;
		cout << "unity::test() 호출됨\n";
	}
};
int unity::iNum = 100;

int main(void)
{
	cout << unity::iNum << endl;
	unity::test();

	unity Obj;
	cout << Obj.iNum << endl;
	Obj.test();
	
	return 0;
}
*/

/*
#include <iostream>
using namespace std;

class CountryArea
{
public:
	const static int Russia = 1707540;
	const static int Canada = 998467;
	const static int China = 9579290;
	const static int South_Korea = 9922;
};

int main(void)
{
	cout << "러시아 면적: " << CountryArea::Russia << "㎢" << endl;
	cout << "캐나다 면적: " << CountryArea::Canada << "㎢" << endl;
	cout << "중국   면적: " << CountryArea::China << "㎢" << endl;
	cout << "한국   면적: " << CountryArea::South_Korea << "㎢" << endl;
	return 0;
}
*/
/*
#include <iostream>
using namespace std;

class SoSimple
{
private:
	int num1;
	mutable int num2;		//const 함수에 대한 예의를 둔다!
public:
	SoSimple(int n1, int n2)
		: num1(n1), num2(n2)
	{}
	void ShowSimpleData() const
	{
		cout << num1 << ", " << num2 << endl;
	}
	void CopyToNum2() const
	{
		num2 = num1;
	}
};
int main(void)
{
	SoSimple sm(1, 2);
	sm.ShowSimpleData();
	sm.CopyToNum2();
	sm.ShowSimpleData();
	return 0;
}
*/

/*
#include <iostream>
using namespace std;

class han
{
public:
	void Test()
	{
		cout << "안녕 나는 테스트라고 해\n";
	}
};

class unity : public han
{
	public:
		void Test2()
		{
			cout << "안녕 나는 테스트2라고 해\n";
		}
};

int main(void)
{
	han ObjHan;
	ObjHan.Test();

	unity ObjUnity;
	ObjUnity.Test();
	ObjUnity.Test2();

	return 0;
}
*/
/*
#include <iostream>
using namespace std;

class Unity : public han
{
public:
	unity()
		:han(1)
	{
		cout << "unity 생성자 호출\n"
	}
	~unity()
	{
		cout << "유니티 소멸 호출\n" }


};
int main(void)

{
	unity ObjUnity;
	reuturn 0;
}
*/

#include <iostream>
#include <cstring>
using namespace std;

class Person
{
private:
	int age;		//나이
	char name[50];	//이름
public:
	Person(int myage, char * myname) : age(myage)
	{
		strcpy(name, myname);
	}
	void WhatYourName() const
	{
		cout << "My name is " << name << endl;
	}
	void HowOldAreYou() const
	{
		cout << "I'm " << age << " years old"<<endl;
	}
};

class UnivStudent : public Person
{
private:
	char major[50];		//전공과목
public:
	UnivStudent(char * myname, int myage, char * mymajor)
		: Person(myage, myname)
	{
		strcpy(major, mymajor);
	}
	void WhoAreYou() const
	{
		WhatYourName();
		HowOldAreYou();
		cout << "My major is " << major << endl << endl;
	}
};

int main(void)
{
	UnivStudent ustd1("Lee", 22, "Computer eng.");
	ustd1.WhoAreYou();

	UnivStudent ustd2("Yoon", 21, "Electronic eng.");
	ustd2.WhoAreYou();
	return 0;
};
